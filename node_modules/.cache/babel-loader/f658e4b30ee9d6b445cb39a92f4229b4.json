{"ast":null,"code":"var _jsxFileName = \"/Users/ishwarbaisla/Documents/GitHub/QuizWit/src/components/Plans.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport $ from 'jquery';\nimport PlanCard from './util/PlanCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Plans() {\n  _s();\n\n  const [plans, setPlans] = useState([]);\n  useEffect(() => {\n    $(\".view-plans-btn\").click(() => {\n      $('html, body').animate({\n        scrollTop: $(\".plans\").offset().top - 50\n      }, 1);\n    });\n    const tempPlans = [{\n      name: 'Free',\n      amount: 0,\n      durationInMonths: 1,\n      contains: [{\n        name: 'Create 2 exams',\n        type: 1\n      }, {\n        name: 'Add 2 section per exam',\n        type: 1\n      }, {\n        name: 'Maximum 10 question per section',\n        type: 1\n      }, {\n        name: 'Timer Exam',\n        type: 1\n      }, {\n        name: 'Section navigation control',\n        type: 0\n      }, {\n        name: 'Question navigation control',\n        type: 0\n      }, {\n        name: 'Shuffle questions',\n        type: 0\n      }, {\n        name: 'Syntax highlighting',\n        type: 0\n      }, {\n        name: 'Private exam add student group',\n        type: 0\n      }, {\n        name: 'Create user',\n        type: 0\n      }]\n    }, {\n      name: 'Silver',\n      amount: 500,\n      durationInMonths: 1,\n      contains: [{\n        name: 'Create 3 exams',\n        type: 1\n      }, {\n        name: 'Add 3 section per exam',\n        type: 1\n      }, {\n        name: 'Maximum 20 question per section',\n        type: 1\n      }, {\n        name: 'Timer Exam',\n        type: 1\n      }, {\n        name: 'Section navigation control',\n        type: 1\n      }, {\n        name: 'Question navigation control',\n        type: 0\n      }, {\n        name: 'Shuffle questions',\n        type: 0\n      }, {\n        name: 'Syntax highlighting',\n        type: 1\n      }, {\n        name: 'Private exam add student group',\n        type: 0\n      }, {\n        name: 'Create 1 user',\n        type: 1\n      }]\n    }, {\n      name: 'Gold',\n      amount: 1000,\n      durationInMonths: 3,\n      contains: [{\n        name: 'Create 5 exams',\n        type: 1\n      }, {\n        name: 'Add 5 section per exam',\n        type: 1\n      }, {\n        name: 'Maximum 30 question per section',\n        type: 1\n      }, {\n        name: 'Timer Exam',\n        type: 1\n      }, {\n        name: 'Section navigation control',\n        type: 1\n      }, {\n        name: 'Question navigation control',\n        type: 1\n      }, {\n        name: 'Shuffle questions',\n        type: 1\n      }, {\n        name: 'Syntax highlighting',\n        type: 1\n      }, {\n        name: 'Private exam add student group',\n        type: 1\n      }, {\n        name: 'Create 1 user',\n        type: 1\n      }]\n    }];\n    setPlans(tempPlans);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"plans\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Administrator Plans\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"plan-row\",\n        children: plans.map((d, key) => {\n          return /*#__PURE__*/_jsxDEV(PlanCard, {\n            name: d.name,\n            amount: d.amount,\n            durationInMonths: d.durationInMonths,\n            contains: d.contains\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 28\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(Plans, \"39TCQbBdUJc805RKzFp5pVsi5Ag=\");\n\n_c = Plans;\nexport default Plans;\n\nvar _c;\n\n$RefreshReg$(_c, \"Plans\");","map":{"version":3,"sources":["/Users/ishwarbaisla/Documents/GitHub/QuizWit/src/components/Plans.js"],"names":["React","useState","useEffect","$","PlanCard","Plans","plans","setPlans","click","animate","scrollTop","offset","top","tempPlans","name","amount","durationInMonths","contains","type","map","d","key"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState, useEffect } from 'react';\nimport $ from 'jquery';\nimport PlanCard from './util/PlanCard';\n\nfunction Plans() {\n    const [plans, setPlans] = useState([]);\n    useEffect(() => {\n        $(\".view-plans-btn\").click(() => {\n            $('html, body').animate({\n                scrollTop: $(\".plans\").offset().top - 50\n            }, 1);\n        });\n\n        const tempPlans = [\n            {\n                name: 'Free',\n                amount: 0,\n                durationInMonths: 1,\n                contains: [\n                    {\n                        name: 'Create 2 exams',\n                        type: 1\n                    },\n                    {\n                        name: 'Add 2 section per exam',\n                        type: 1\n                    },\n                    {\n                        name: 'Maximum 10 question per section',\n                        type: 1\n                    },\n                    {\n                        name: 'Timer Exam',\n                        type: 1\n                    },\n                    {\n                        name: 'Section navigation control',\n                        type: 0\n                    },\n                    {\n                        name: 'Question navigation control',\n                        type: 0\n                    },\n                    {\n                        name: 'Shuffle questions',\n                        type: 0\n                    },\n                    {\n                        name: 'Syntax highlighting',\n                        type: 0\n                    },\n                    {\n                        name: 'Private exam add student group',\n                        type: 0\n                    },\n                    {\n                        name: 'Create user',\n                        type: 0\n                    }\n                ]\n            },\n            {\n                name: 'Silver',\n                amount: 500,\n                durationInMonths: 1,\n                contains: [\n                    {\n                        name: 'Create 3 exams',\n                        type: 1\n                    },\n                    {\n                        name: 'Add 3 section per exam',\n                        type: 1\n                    },\n                    {\n                        name: 'Maximum 20 question per section',\n                        type: 1\n                    },\n                    {\n                        name: 'Timer Exam',\n                        type: 1\n                    },\n                    {\n                        name: 'Section navigation control',\n                        type: 1\n                    },\n                    {\n                        name: 'Question navigation control',\n                        type: 0\n                    },\n                    {\n                        name: 'Shuffle questions',\n                        type: 0\n                    },\n                    {\n                        name: 'Syntax highlighting',\n                        type: 1\n                    },\n                    {\n                        name: 'Private exam add student group',\n                        type: 0\n                    },\n                    {\n                        name: 'Create 1 user',\n                        type: 1\n                    }\n                ]\n            },\n            {\n                name: 'Gold',\n                amount: 1000,\n                durationInMonths: 3,\n                contains: [\n                    {\n                        name: 'Create 5 exams',\n                        type: 1\n                    },\n                    {\n                        name: 'Add 5 section per exam',\n                        type: 1\n                    },\n                    {\n                        name: 'Maximum 30 question per section',\n                        type: 1\n                    },\n                    {\n                        name: 'Timer Exam',\n                        type: 1\n                    },\n                    {\n                        name: 'Section navigation control',\n                        type: 1\n                    },\n                    {\n                        name: 'Question navigation control',\n                        type: 1\n                    },\n                    {\n                        name: 'Shuffle questions',\n                        type: 1\n                    },\n                    {\n                        name: 'Syntax highlighting',\n                        type: 1\n                    },\n                    {\n                        name: 'Private exam add student group',\n                        type: 1\n                    },\n                    {\n                        name: 'Create 1 user',\n                        type: 1\n                    }\n                ]\n            }\n        ];\n        setPlans(tempPlans);\n\n    }, []);\n  return (\n      <>\n      <div className='plans'>\n        <h1>Administrator Plans</h1>\n        <div className='plan-row'>\n            {\n                plans.map((d, key) => {\n                    return <PlanCard \n                        name={d.name}\n                        amount={d.amount}\n                        durationInMonths={d.durationInMonths}\n                        contains={d.contains}\n                    />\n                })\n            }\n        </div>\n      </div>\n      </>\n  );\n}\n\nexport default Plans;\n"]},"metadata":{},"sourceType":"module"}